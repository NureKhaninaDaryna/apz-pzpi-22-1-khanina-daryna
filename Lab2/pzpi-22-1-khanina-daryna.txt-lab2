                                Міністерство освіти і науки України

Харківський національний університет радіоелектроніки







Кафедра ПІ






Звіт з лабораторної роботи №2
З дисципліни «Архітектура програмного забезпечення»





Виконав:
ст. гр. ПЗПІ-22-1	Ханіна Д.Д

Перевірив:
ст. викл.	Сокорчук І. П.








Харків 2025 р.
ЛАБОРАТОРНА РОБОТА №1

1 ІСТОРІЯ ЗМІН


№
Дата
Версія звіту 
Опис змін
1
19.04.2025
0.1
Створення звіту



2 ЗАВДАННЯ

Внести зміни в серверну частину програми.

3 ОПИС ВИКОНАНОЇ РОБОТИ

Було обрано тему роботи – «Програмна система збору статистики для закладів харчування DineMetrics».
Оноволина серверну частину (див. додаток Б) для обраної теми проекту. Створила відеозапис (див. додаток А) з демонстрацією написаного документа з описаним проектом.

4 ВИСНОВКИ

В ході виконання лабораторної роботи я навчилася застосовувати знання для написання та налаштування серверної частини програми.







ДОДАТОК А

Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://www.youtube.com/watch?v=yWNPf3em9lk

Хронологічний опис відеозапису:
00:00 - Вступ 
00:09 - Мета лабораторної роботи 
00:22 - Резервне копіювання 
03:10 - Реалізація системи керування доступом на основі ролей (RBAC) 
06:45 - Математична обробку даних 
08:04 - Подяка за перегляд




























ДОДАТОК Б

Резервне копіювання

Було реалізовано сервіс резервного копіювання налаштувань IoT-закладу, який дозволяє зберігати поточні конфігурації (години роботи, максимальна місткість, температурний поріг) у вигляді окремих резервних записів з можливістю подальшого відновлення. Для цього створено окрему сутність EaterySettingsBackup та сервіс SettingsBackupService, який реалізує CRUD-операції над резервами.

Модель резервного копіювання - https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab2/pzpi-22-1-khanina-daryna-lab2/DineMetrics.Core/Models/EaterySettingsBackup.cs

Контроллер для резервного копіювання - https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab2/pzpi-22-1-khanina-daryna-lab2/DeniMetrics.WebAPI/Controllers/BackupsController.cs

Контракт для резервного копіювання -  https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab2/pzpi-22-1-khanina-daryna-lab2/DineMetrics.BLL/Services/Interfaces/ISettingsBackupService.cs

Сервіс для резервного копіювання - https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab2/pzpi-22-1-khanina-daryna-lab2/DineMetrics.BLL/Services/SettingsBackupService.cs

Нова міграція для резервного копіювання- https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab2/pzpi-22-1-khanina-daryna-lab2/DineMetrics.DAL/Migrations/20250416052442_AddEaterySettingsBackupsTable.cs


Реалізація системи керування доступом на основі ролей (RBAC)
У рамках проекту було впроваджено систему керування доступом до функціоналу платформи відповідно до ролі користувача та рівня доступу. Це дозволяє забезпечити гнучкий контроль над тим, які користувачі можуть бачити або змінювати певні частини системи.
1. Ролі користувачів
Було визначено п’ять основних ролей:
Admin – повний доступ до всієї системи.


FacilityManager – управління закладами, пристроями, метриками, персоналом.


Staff – доступ лише на читання до даних закладу та метрик.


Analyst – доступ лише до аналітики.


Viewer – глобальний доступ лише на читання до більшості модулів.


2. Доступи до функціональності
Було створено перерахування PermissionAccess із двома рівнями:
Full – повний доступ (читання + редагування),


Read – лише перегляд даних.


3. Керовані модулі
Система підтримує контроль доступу до таких частин:
Аналітика (AnalyticsManagement),


Заклади (EateriesManagement),


Метрики (MetricsManagement),


Резервні копії (BackupsManagement),


Пристрої (DevicesManagement),


Персонал (EmployeesManagement),


Користувачі (UsersManagement).


4. Статична колекція прав доступу
Було реалізовано клас RolePermissionsStore, який містить колекцію AllPermissions, що визначає допустимі поєднання ролей, модулів і рівнів доступу. Для кожної ролі чітко задано, до яких модулів вона має доступ, і в якому режимі (повний або тільки читання).
5. Атрибут авторизації
Було реалізовано атрибут PermissionAuthorizeAttribute, який дозволяє обмежити доступ до методів контролерів на основі ролі користувача. Атрибут перевіряє:
роль користувача (отримується з HTTP-контексту),


чи має він дозвіл на вказаний модуль із потрібним рівнем доступу.


6. Виправлення проблеми з авторизацією
У процесі реалізації було виявлено, що всі дозволи у списку AllPermissions були однакові. Це було пов’язано з відсутністю публічного конструктора в класі RolePermission. Після додавання конструктора з параметрами (Access, Role, Management) — система почала коректно ініціалізувати унікальні об’єкти для кожного дозволу.


Логіка для пермісій -  https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab2/pzpi-22-1-khanina-daryna-lab2/DeniMetrics.WebAPI/Attributes/PermissionAuthorizeAttribute.cs

Створено математичну обробку даних для побудови аналітики та рекомендацій (розрахунок трендів, середніх значень, відхилень)

Математична обробка даних - 
https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab2/pzpi-22-1-khanina-daryna-lab2/DineMetrics.BLL/Services/AnalyticsService.cs

