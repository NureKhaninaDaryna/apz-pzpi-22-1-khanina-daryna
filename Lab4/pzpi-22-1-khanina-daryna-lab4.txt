Міністерство освіти і науки України

Харківський національний університет радіоелектроніки







Кафедра ПІ






Звіт з лабораторної роботи №4
З дисципліни «Архітектура програмного забезпечення»





Виконав:
ст. гр. ПЗПІ-22-1	Ханіна Д.Д.

Перевірив:
ст. викл.	Сокорчук І. П.








Харків 2025 р.
1 ІСТОРІЯ ЗМІН


№
Дата
Версія звіту 
Опис змін
1
15.05.2025
0.1
Створення звіту


































2 ЗАВДАННЯ

На цій лабораторній роботі потрібно розробити мобільний програмний застосунок для будь-якої поширеної на сьогодні мобільної платформи. Мобільний застосунок повинен бути частиною системи і повинен взаємодіяти з нею.
Звіт повинен містити: 
- UML діаграму прецедентів (Use Case Diagram); 
- UML діаграму компонент (Component Diagram). 
- ER-модель даних (Entity–Relationship Model) мобільної платформи; 
- UML діаграму взаємодії (Interaction Overview Diagram);

















3 ОПИС ВИКОНАНОЇ РОБОТИ

В рамках виконаної роботи було розроблено мобільний додаток на платформі .NET MAUI, який призначений виключно для користувачів із правами адміністратора. Основні функціональні можливості додатку забезпечують швидкий доступ до ключових показників ефективності закладу в режимі реального часу та дозволяють здійснювати управління налаштуваннями системи безпосередньо з мобільного пристрою.
Інженерні підходи та архітектурні рішення:
Вибір .NET MAUI зумовлений необхідністю створення кросплатформеного застосунку для iOS та Android з єдиною кодовою базою.


Архітектура додатку побудована за принципами MVVM (Model-View-ViewModel) для чіткої роздільності логіки бізнес-процесів і відображення інтерфейсу.


Для роботи з API використано HttpClient із централізованою конфігурацією базової адреси та передачі токену авторизації в заголовках запитів.


Аутентифікація реалізована через JWT Token з підтримкою лише ролі Admin.


Для управління доступом до функціоналу використано рольову систему RBAC.


Реалізовані функціональні можливості:
Авторизація користувачів-адміністраторів через серверний API.


Відображення основних метрик закладу в реальному часі (дані з IoT-пристроїв):


Температурні метрики.


Показники присутності клієнтів.


Редагування налаштувань закладів (CRUD-операції через API).


Автоматичне оновлення даних у ViewModel для забезпечення актуальності показників.


Захист роутів та навігації у додатку (недопуск неавторизованих користувачів).


Зручний інтерфейс з використанням CollectionView для відображення списків метрик.


Використані технології та інструменти:
.NET 8 та .NET MAUI.


C#, XAML.


CommunityToolkit.Mvvm для спрощення патерну MVVM.


REST API взаємодія через HttpClient.


JWT Token для аутентифікації та авторизації.


Dependency Injection для керування життєвим циклом сервісів.


Висновки:
У результаті виконаної роботи було створено кросплатформений мобільний додаток, який відповідає усім заданим вимогам. Додаток забезпечує:
Швидкий доступ до ключових показників закладу в реальному часі.


Зручне управління налаштуваннями системи з мобільного пристрою.


Гнучку систему аутентифікації з обмеженням доступу лише для адміністраторів. Отримано практичні навички роботи з .NET MAUI, реалізації взаємодії з REST API, побудови архітектури MVVM та захисту доступу через JWT.











4 ВИСНОВКИ
У результаті виконаної роботи було створено кросплатформений мобільний додаток, який відповідає усім заданим вимогам. Додаток забезпечує:
Швидкий доступ до ключових показників закладу в реальному часі.


Зручне управління налаштуваннями системи з мобільного пристрою.


Гнучку систему аутентифікації з обмеженням доступу лише для адміністраторів. Отримано практичні навички роботи з .NET MAUI, реалізації взаємодії з REST API, побудови архітектури MVVM та захисту доступу через JWT.














ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/OZvr2RRNGEM

Хронологічний опис відеозапису:

00:00 - Вступ 
01:15 - Авторизація користувачів-адміністраторів 
01:45 - Відображення основних метрик
02:25 - Редагування налаштувань закладів
04:30 - Подяка за перегляд
















ДОДАТОК Б



Рисунок Б.1 — ER-діаграма даних



Рисунок Б.2 — Структура бази даних

Рисунок Б.3 — UML-діаграма прецедентів

Рисунок Б.4 — UML-діаграма прецедентів



Рисунок Б.5 — UML діаграму компонент



Рисунок Б.6 — ER-модель даних



Рисунок Б.7 — UML діаграму взаємодії


























ДОДАТОК В
Програмний код

В.1 Математична обробка прикладних даних

GitHub репозиторій: https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab2/pzpi-22-1-khanina-daryna-lab2/DineMetrics.BLL/Services/AnalyticsService.cs


1.     public async Task<ServiceResult<PeakLoadRecommendationDto>> GetPeakLoadRecommendations(int eateryId, DateTime from, DateTime to)
2.     {
3.         var metrics = await customerMetricRepository.GetByPredicateAsync(m =>
4.             m.Device.Eatery.Id == eateryId && m.Time >= from && m.Time <= to);
5. 
6.         var grouped = metrics
7.             .GroupBy(m => m.Time.Hour)
8.             .Select(g => new { Hour = g.Key, AverageVisitors = g.Average(m => m.Count) })
9.             .OrderByDescending(x => x.AverageVisitors)
10.             .ToList();
11. 
12.         var peakHours = grouped.Take(3).Select(x => x.Hour).ToList();
13. 
14.         return ServiceResult<PeakLoadRecommendationDto>.Success(new PeakLoadRecommendationDto
15.         {
16.             RecommendedStaffIncreaseHours = peakHours
17.         });
18.     }
19. 
20.     public async Task<ServiceResult<AnomalyDetectionDto>> DetectAnomalies(int eateryId, DateTime from, DateTime to)
21.     {
22.         var metrics = await temperatureMetricRepository.GetByPredicateAsync(m =>
23.             m.Device.Eatery.Id == eateryId && m.Time >= from && m.Time <= to);
24. 
25.         var average = metrics.Average(m => m.Value);
26.         var stdDev = Math.Sqrt(metrics.Average(m => Math.Pow(m.Value - average, 2)));
27. 
28.         var anomalies = metrics
29.             .Where(m => Math.Abs(m.Value - average) > 2 * stdDev)
30.             .ToList();
31. 
32.         return ServiceResult<AnomalyDetectionDto>.Success(new AnomalyDetectionDto
33.         {
34.             AnomalyTimestamps = anomalies.Select(a => a.Time).ToList(),
35.             Threshold = average,
36.             StandardDeviation = stdDev
37.         });
38.     }
39. 
40.     public async Task<ServiceResult<LoadForecastDto>> ForecastLoad(int eateryId, int daysAhead)
41.     {
42.         var metrics = await customerMetricRepository.GetByPredicateAsync(m => m.Device.Eatery.Id == eateryId);
43.         var dailyGroups = metrics.GroupBy(m => m.Time.Date)
44.             .Select(g => new { Date = g.Key, Count = g.Sum(m => m.Count) })
45.             .OrderBy(g => g.Date)
46.             .ToList();
47. 
48.         var averageLoad = dailyGroups.Average(x => x.Count);
49. 
50.         var forecast = new List<ForecastDay>();
51.         for (var i = 1; i <= daysAhead; i++)
52.         {
53.             forecast.Add(new ForecastDay
54.             {
55.                 Date = DateTime.Today.AddDays(i),
56.                 ExpectedVisitors = (int)(averageLoad + (i % 3 == 0 ? 20 : 0))
57.             });
58.         }
59. 
60.         return ServiceResult<LoadForecastDto>.Success(new LoadForecastDto
61.         {
62.             Forecast = forecast
63.         })
В.2 Адміністрування бізнес-логіки системи

GitHub репозиторій: https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab2/pzpi-22-1-khanina-daryna-lab2/DeniMetrics.WebAPI/Attributes/PermissionAuthorizeAttribute.cs

1. ﻿using DineMetrics.Core.Enums;
2. using DineMetrics.Core.Models;
3. using DineMetrics.Core.Stores;
4. using Microsoft.AspNetCore.Mvc;
5. using Microsoft.AspNetCore.Mvc.Filters;
6. 
7. namespace DeniMetrics.WebAPI.Attributes;
8. 
9. [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class)]
10. public class PermissionAuthorizeAttribute(ManagementName management, PermissionAccess requiredAccess)
11.     : Attribute, IAsyncActionFilter
12. {
13.     public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)
14.     {
15.         var user = (User?)context.HttpContext.Items["User"];
16. 
17.         if (user == null)
18.         {
19.             context.Result = new JsonResult(new { message = "Unauthorized" }) { StatusCode = StatusCodes.Status401Unauthorized };
20.             return;
21.         }
22. 
23.         var hasPermission = RolePermissionsStore.AllPermissions.Any(p =>
24.             p.Role == user.Role &&
25.             p.Management == management &&
26.             (
27.                 p.Access == PermissionAccess.Full ||
28.                 (p.Access == PermissionAccess.Read && requiredAccess == PermissionAccess.Read)
29.             ));
30. 
31.         if (!hasPermission)
32.         {
33.             context.Result = new JsonResult(new { message = "You don't have proper permission to do this" }) { StatusCode = StatusCodes.Status401Unauthorized };
34.             return;
35.         }
36. 
37.         await next();
38.     }
39. }
40. 


В.3 Резервне копіювання користувацьких даних

GitHub репозиторій: https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab2/pzpi-22-1-khanina-daryna-lab2/DineMetrics.BLL/Services/SettingsBackupService.cs 

1. ﻿using DineMetrics.BLL.Services.Interfaces;
2. using DineMetrics.Core.Models;
3. using DineMetrics.Core.Shared;
4. using DineMetrics.DAL;
5. using DineMetrics.DAL.Repositories;
6. 
7. namespace DineMetrics.BLL.Services;
8. 
9. public class SettingsBackupService(IRepository<EaterySettingsBackup> repository, IRepository<Eatery> eateryRepository) : ISettingsBackupService
10. {
11.     public async Task<ServiceResult> BackupEaterySettings(int eateryId)
12.     {
13.         var eatery = await eateryRepository.GetByIdAsync(eateryId);
14.         if (eatery == null) return ServiceResult.Failure(new Error("Eatery not found"));
15. 
16.         var backup = new EaterySettingsBackup
17.         {
18.             EateryId = eateryId,
19.             OperatingHours = eatery.OperatingHours,
20.             MaximumCapacity = eatery.MaximumCapacity,
21.             TemperatureThreshold = eatery.TemperatureThreshold
22.         };
23. 
24.         await repository.CreateAsync(backup);
25.         
26.         return ServiceResult.Success;
27.     }
28. 
29.     public async Task<ServiceResult> RestoreEaterySettings(int eateryId, string backupName)
30.     {
31.         var backup = (await repository
32.             .GetByPredicateAsync(b => b.EateryId == eateryId && b.BackupName == backupName))
33.             .FirstOrDefault();
34. 
35.         if (backup == null) return ServiceResult.Failure(new Error("Backup not found"));
36. 
37.         var eatery = await eateryRepository.GetByIdAsync(eateryId);
38.         if (eatery == null) return ServiceResult.Failure(new Error("Eatery not found"));
39. 
40.         eatery.OperatingHours = backup.OperatingHours;
41.         eatery.MaximumCapacity = backup.MaximumCapacity;
42.         eatery.TemperatureThreshold = backup.TemperatureThreshold;
43. 
44.         await eateryRepository.UpdateAsync(eatery);
45.         
46.         return ServiceResult.Success;
47.     }
48. 
49.     public async Task<List<EaterySettingsBackup>> GetBackups(int eateryId)
50.     {
51.         var backups = await repository.GetByPredicateAsync(b => b.EateryId == eateryId);
52. 
53.         return backups.OrderByDescending(b => b.BackupTime).ToList();
54.     }
55. }
56. 







В.4  Сторінка аутентифікації

GitHub репозиторій: https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab4/pzpi-22-1-khanina-daryna-lab4/DineMetrics.Mobile/Pages/LoginPage.xaml

1. ﻿<?xml version="1.0" encoding="utf-8"?>
2. 
3. <ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
4.              xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
5.              x:Class="DineMetrics.Mobile.Pages.LoginPage">
6.     <ContentPage.Content>
7.         <ScrollView>
8.             <VerticalStackLayout Padding="20" Spacing="15">
9.                 
10.                 <Label Text="Login" FontSize="32" HorizontalOptions="Center"/>
11. 
12.                 <Entry Placeholder="Email"
13.                        Text="{Binding Username}" />
14. 
15.                 <Entry Placeholder="Password"
16.                        IsPassword="True"
17.                        Text="{Binding Password}" />
18. 
19.                 <Label Text="{Binding FeedbackMessage}" TextColor="Red" />
20. 
21.                 <Button Text="Login"
22.                         Command="{Binding LoginCommand}" />
23.                 
24.             </VerticalStackLayout>
25.         </ScrollView>
26.     </ContentPage.Content>
27. </ContentPage>














В.5 Сторінка метрик

GitHub репозиторій: https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab4/pzpi-22-1-khanina-daryna-lab4/DineMetrics.Mobile/Pages/MetricsPage.xaml

1. ﻿<?xml version="1.0" encoding="utf-8"?>
2. 
3. <ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
4.              xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
5.              x:Class="DineMetrics.Mobile.Pages.MetricsPage">
6.     <ContentPage.Content>
7.         <ScrollView>
8.             <VerticalStackLayout Padding="10" Spacing="20">
9.             
10.                 <Label Text="Temperature Metrics" FontAttributes="Bold" FontSize="Large"/>
11.             
12.                 <CollectionView ItemsSource="{Binding TemperatureMetrics}">
13.                     <CollectionView.ItemTemplate>
14.                         <DataTemplate>
15.                             <Frame BorderColor="Gray" CornerRadius="5" Padding="10" Margin="0,5">
16.                                 <VerticalStackLayout>
17.                                     <Label Text="{Binding DeviceModel}" FontAttributes="Bold"/>
18.                                     
19.                                     <Label>
20.                                         <Label.FormattedText>
21.                                             <FormattedString>
22.                                                 <Span Text="Value: "/>
23.                                                 <Span Text="{Binding Value}" />
24.                                             </FormattedString>
25.                                         </Label.FormattedText>
26.                                     </Label>
27.                                     
28.                                     <Label Text="{Binding Time, StringFormat='{0:dd.MM.yyyy HH:mm}'}" FontSize="Small" TextColor="Gray"/>
29.                                 </VerticalStackLayout>
30.                             </Frame>
31.                         </DataTemplate>
32.                     </CollectionView.ItemTemplate>
33.                 </CollectionView>
34. 
35.                 <Label Text="Customer Metrics" FontAttributes="Bold" FontSize="Large" Margin="0,20,0,0"/>
36.             
37.                 <CollectionView ItemsSource="{Binding CustomerMetrics}">
38.                     <CollectionView.ItemTemplate>
39.                         <DataTemplate>
40.                             <Frame BorderColor="Gray" CornerRadius="5" Padding="10" Margin="0,5">
41.                                 <VerticalStackLayout>
42.                                     <Label Text="{Binding DeviceModel}" FontAttributes="Bold"/>
43.                                     
44.                                     <Label>
45.                                         <Label.FormattedText>
46.                                             <FormattedString>
47.                                                 <Span Text="Count: "/>
48.                                                 <Span Text="{Binding Count}" />
49.                                             </FormattedString>
50.                                         </Label.FormattedText>
51.                                     </Label>
52.                                     
53.                                     <Label Text="{Binding Time, StringFormat='{0:dd.MM.yyyy HH:mm}'}" FontSize="Small" TextColor="Gray"/>
54.                                 </VerticalStackLayout>
55.                             </Frame>
56.                         </DataTemplate>
57.                     </CollectionView.ItemTemplate>
58.                 </CollectionView>
59. 
60.             </VerticalStackLayout>
61.         </ScrollView>
62.     </ContentPage.Content>
63. </ContentPage>












В.6 Сторінка зміни налаштувань закладу

GitHub репозиторій: https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab4/pzpi-22-1-khanina-daryna-lab4/DineMetrics.Mobile/Pages/SettingsPage.xaml

1. ﻿<?xml version="1.0" encoding="utf-8"?>
2. 
3. <ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
4.              xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
5.              x:Class="DineMetrics.Mobile.Pages.SettingsPage">
6.     <ContentPage.Content>
7.         <ScrollView>
8.             <VerticalStackLayout Padding="20" Spacing="15">
9.                 <Label Text="Select Eatery" FontAttributes="Bold"/>
10.                 <Picker ItemsSource="{Binding Eateries}"
11.                         ItemDisplayBinding="{Binding Name}"
12.                         SelectedItem="{Binding SelectedEatery}" />
13. 
14. 
15.                 <Label Text="Operating Hours (From - To)" FontAttributes="Bold"/>
16.                 <HorizontalStackLayout>
17.                     <Entry Placeholder="From" Text="{Binding FromTime}" WidthRequest="100"/>
18.                     <Entry Placeholder="To" Text="{Binding ToTime}" WidthRequest="100"/>
19.                 </HorizontalStackLayout>
20. 
21.                 <Label Text="Maximum Capacity" FontAttributes="Bold"/>
22.                 <Entry Keyboard="Numeric" Text="{Binding MaximumCapacity}" />
23. 
24.                 <Label Text="Min. Temperature Threshold" FontAttributes="Bold"/>
25.                 <Entry Keyboard="Numeric" Text="{Binding TemperatureThreshold}" />
26. 
27.                 <Button Text="Save Settings"
28.                         Command="{Binding SaveCommand}" />
29. 
30.                 <Button Text="Load Eateries"
31.                         Command="{Binding LoadCommand}" />
32.             </VerticalStackLayout>
33.         </ScrollView>
34.     </ContentPage.Content>
