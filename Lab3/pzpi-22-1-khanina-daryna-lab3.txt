                                 Міністерство освіти і науки України

Харківський національний університет радіоелектроніки







Кафедра ПІ






Звіт з лабораторної роботи №3
З дисципліни «Архітектура програмного забезпечення»





Виконав:
ст. гр. ПЗПІ-22-1	Ханіна Д.Д

Перевірив:
ст. викл.	Сокорчук І. П.








Харків 2025 р.
1 ІСТОРІЯ ЗМІН


№
Дата
Версія звіту 
Опис змін
1
07.05.2025
0.1
Створення звіту


































2 ЗАВДАННЯ

На цій лабораторній роботі потрібно розробити front-end частину програмної системи.
-  опис прийнятих інженерних рішень; 
- опис взаємодії компонентів web-застосунку одне з одним та з іншими елементами системи; 
- UML діаграму прецедентів (Use Case Diagram); 
- UML діаграму компонент (Component Diagram);
- UML діаграму діяльності (Activity Diagram); 
- UML діаграму станів (State Diagram).

















3 ОПИС ВИКОНАНОЇ РОБОТИ
У процесі виконання роботи було реалізовано web-застосунок для моніторингу параметрів IoT-пристроїв у закладах харчування. Основна мета — забезпечити адміністративний доступ до аналітики, сповіщень та управління користувачами на основі ролей.
Обґрунтування вибору мови програмування.
 Для бекенду було обрано мову C# та фреймворк ASP.NET Core завдяки його високій продуктивності, надійній підтримці REST API та зручному впровадженню авторизації/аутентифікації. Для фронтенду було обрано React з TypeScript для забезпечення типобезпечності та зручності розробки UI.


Розробка архітектури програмної системи.
	 Система побудована за принципами клієнт-серверної архітектури. Бекенд реалізує REST API та підключення через SignalR для push-сповіщень. Фронтенд взаємодіє з API через Axios та MobX як систему керування станом.


Використання шаблонів проєктування.
	 У бекенді застосовано шаблони Repository та Service для розділення логіки доступу до даних та бізнес-логіки. Також використано паттерн Unit of Work для керування транзакціями.


Побудова UML-діаграм.
 	У рамках роботи створено діаграми прецедентів (Use Case), компонентів (Component), а також діаграми діяльності та станів, що ілюструють логіку UI та обробки подій.


Реалізація функціональних модулів.
 Реалізовано функціонал:


авторизації/реєстрації;


зміни пароля з валідацією;


генерації PDF-звітів (щоденних, щотижневих, щомісячних);


керування ролями користувачів з модальним вікном;


push-нотифікацій через SignalR;


дашборду з показниками ефективності.












4 ВИСНОВКИ

У результаті виконання роботи було створено повноцінний web-застосунок для адміністрування IoT-пристроїв та збору аналітики.
	Отримано практичні навички у використанні сучасних веб-технологій: ASP.NET Core, React, MobX, SignalR.
	Реалізовано програмне забезпечення відповідає вимогам технічного завдання, включаючи реалізацію RBAC, генерацію звітів, UI-інтерфейс для управління користувачами та систему сповіщень.






























ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://www.youtube.com/watch?v=3je_zw7lP1k

Хронологічний опис відеозапису:

00:00 - Вступ 
00:11 - Мета лабораторної роботи 
00:23 - Реєстрація та аутентифікація
01:18 - Зміна паролю
01:55 - Можливості аналітика
02:19 - Аналітичні сторінки
03:30 - Сторінка репортів
04:12 - Можливості адміна
04:21 - CRUD над закладами
05:24 - Менеджмент над користувачами
05:50 - Автоматичні сповіщення від IOT
06:47 - Подяка за перегляд


















ДОДАТОК Б




Рисунок Б.1 — ER-діаграма даних



Рисунок Б.2 — Структура бази даних

Рисунок Б.3 — UML-діаграма прецедентів





Рисунок Б.4 — UML-діаграма компонентів



Рисунок Б.5 — UML-діаграма діяльності









Рисунок Б.6 — UML-діаграма станів








ДОДАТОК В
Програмний код

В.1 Математична обробка прикладних даних

GitHub репозиторій: https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab2/pzpi-22-1-khanina-daryna-lab2/DineMetrics.BLL/Services/AnalyticsService.cs


1.     public async Task<ServiceResult<PeakLoadRecommendationDto>> GetPeakLoadRecommendations(int eateryId, DateTime from, DateTime to)
2.     {
3.         var metrics = await customerMetricRepository.GetByPredicateAsync(m =>
4.             m.Device.Eatery.Id == eateryId && m.Time >= from && m.Time <= to);
5. 
6.         var grouped = metrics
7.             .GroupBy(m => m.Time.Hour)
8.             .Select(g => new { Hour = g.Key, AverageVisitors = g.Average(m => m.Count) })
9.             .OrderByDescending(x => x.AverageVisitors)
10.             .ToList();
11. 
12.         var peakHours = grouped.Take(3).Select(x => x.Hour).ToList();
13. 
14.         return ServiceResult<PeakLoadRecommendationDto>.Success(new PeakLoadRecommendationDto
15.         {
16.             RecommendedStaffIncreaseHours = peakHours
17.         });
18.     }
19. 
20.     public async Task<ServiceResult<AnomalyDetectionDto>> DetectAnomalies(int eateryId, DateTime from, DateTime to)
21.     {
22.         var metrics = await temperatureMetricRepository.GetByPredicateAsync(m =>
23.             m.Device.Eatery.Id == eateryId && m.Time >= from && m.Time <= to);
24. 
25.         var average = metrics.Average(m => m.Value);
26.         var stdDev = Math.Sqrt(metrics.Average(m => Math.Pow(m.Value - average, 2)));
27. 
28.         var anomalies = metrics
29.             .Where(m => Math.Abs(m.Value - average) > 2 * stdDev)
30.             .ToList();
31. 
32.         return ServiceResult<AnomalyDetectionDto>.Success(new AnomalyDetectionDto
33.         {
34.             AnomalyTimestamps = anomalies.Select(a => a.Time).ToList(),
35.             Threshold = average,
36.             StandardDeviation = stdDev
37.         });
38.     }
39. 
40.     public async Task<ServiceResult<LoadForecastDto>> ForecastLoad(int eateryId, int daysAhead)
41.     {
42.         var metrics = await customerMetricRepository.GetByPredicateAsync(m => m.Device.Eatery.Id == eateryId);
43.         var dailyGroups = metrics.GroupBy(m => m.Time.Date)
44.             .Select(g => new { Date = g.Key, Count = g.Sum(m => m.Count) })
45.             .OrderBy(g => g.Date)
46.             .ToList();
47. 
48.         var averageLoad = dailyGroups.Average(x => x.Count);
49. 
50.         var forecast = new List<ForecastDay>();
51.         for (var i = 1; i <= daysAhead; i++)
52.         {
53.             forecast.Add(new ForecastDay
54.             {
55.                 Date = DateTime.Today.AddDays(i),
56.                 ExpectedVisitors = (int)(averageLoad + (i % 3 == 0 ? 20 : 0))
57.             });
58.         }
59. 
60.         return ServiceResult<LoadForecastDto>.Success(new LoadForecastDto
61.         {
62.             Forecast = forecast
63.         });
64.     }
65. 

В.2 Адміністрування бізнес-логіки системи

GitHub репозиторій: https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab2/pzpi-22-1-khanina-daryna-lab2/DeniMetrics.WebAPI/Attributes/PermissionAuthorizeAttribute.cs

1. ﻿using DineMetrics.Core.Enums;
2. using DineMetrics.Core.Models;
3. using DineMetrics.Core.Stores;
4. using Microsoft.AspNetCore.Mvc;
5. using Microsoft.AspNetCore.Mvc.Filters;
6. 
7. namespace DeniMetrics.WebAPI.Attributes;
8. 
9. [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class)]
10. public class PermissionAuthorizeAttribute(ManagementName management, PermissionAccess requiredAccess)
11.     : Attribute, IAsyncActionFilter
12. {
13.     public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)
14.     {
15.         var user = (User?)context.HttpContext.Items["User"];
16. 
17.         if (user == null)
18.         {
19.             context.Result = new JsonResult(new { message = "Unauthorized" }) { StatusCode = StatusCodes.Status401Unauthorized };
20.             return;
21.         }
22. 
23.         var hasPermission = RolePermissionsStore.AllPermissions.Any(p =>
24.             p.Role == user.Role &&
25.             p.Management == management &&
26.             (
27.                 p.Access == PermissionAccess.Full ||
28.                 (p.Access == PermissionAccess.Read && requiredAccess == PermissionAccess.Read)
29.             ));
30. 
31.         if (!hasPermission)
32.         {
33.             context.Result = new JsonResult(new { message = "You don't have proper permission to do this" }) { StatusCode = StatusCodes.Status401Unauthorized };
34.             return;
35.         }
36. 
37.         await next();
38.     }
39. }
40. 


В.3 Резервне копіювання користувацьких даних

GitHub репозиторій: https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab2/pzpi-22-1-khanina-daryna-lab2/DineMetrics.BLL/Services/SettingsBackupService.cs 

1. ﻿using DineMetrics.BLL.Services.Interfaces;
2. using DineMetrics.Core.Models;
3. using DineMetrics.Core.Shared;
4. using DineMetrics.DAL;
5. using DineMetrics.DAL.Repositories;
6. 
7. namespace DineMetrics.BLL.Services;
8. 
9. public class SettingsBackupService(IRepository<EaterySettingsBackup> repository, IRepository<Eatery> eateryRepository) : ISettingsBackupService
10. {
11.     public async Task<ServiceResult> BackupEaterySettings(int eateryId)
12.     {
13.         var eatery = await eateryRepository.GetByIdAsync(eateryId);
14.         if (eatery == null) return ServiceResult.Failure(new Error("Eatery not found"));
15. 
16.         var backup = new EaterySettingsBackup
17.         {
18.             EateryId = eateryId,
19.             OperatingHours = eatery.OperatingHours,
20.             MaximumCapacity = eatery.MaximumCapacity,
21.             TemperatureThreshold = eatery.TemperatureThreshold
22.         };
23. 
24.         await repository.CreateAsync(backup);
25.         
26.         return ServiceResult.Success;
27.     }
28. 
29.     public async Task<ServiceResult> RestoreEaterySettings(int eateryId, string backupName)
30.     {
31.         var backup = (await repository
32.             .GetByPredicateAsync(b => b.EateryId == eateryId && b.BackupName == backupName))
33.             .FirstOrDefault();
34. 
35.         if (backup == null) return ServiceResult.Failure(new Error("Backup not found"));
36. 
37.         var eatery = await eateryRepository.GetByIdAsync(eateryId);
38.         if (eatery == null) return ServiceResult.Failure(new Error("Eatery not found"));
39. 
40.         eatery.OperatingHours = backup.OperatingHours;
41.         eatery.MaximumCapacity = backup.MaximumCapacity;
42.         eatery.TemperatureThreshold = backup.TemperatureThreshold;
43. 
44.         await eateryRepository.UpdateAsync(eatery);
45.         
46.         return ServiceResult.Success;
47.     }
48. 
49.     public async Task<List<EaterySettingsBackup>> GetBackups(int eateryId)
50.     {
51.         var backups = await repository.GetByPredicateAsync(b => b.EateryId == eateryId);
52. 
53.         return backups.OrderByDescending(b => b.BackupTime).ToList();
54.     }
55. }
56. 


В.4 UI сервіс для аналітики. HTTP Виклики.

GitHub репозиторій: https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab3/pzpi-22-1-khanina-daryna-lab3/my-react-app/src/app/stores/analyticsStore.ts

1. ﻿import {makeAutoObservable, runInAction} from "mobx";
2. import agent from "../api/agent.ts";
3. import {DashboardDataDto, TrendAnalysisDto} from "../models/analytics.ts";
4. 
5. export default class AnalyticsStore {
6.    dashboardInfo: DashboardDataDto | undefined = undefined;
7.    fromDate: Date | undefined = undefined;
8.    toDate: Date | undefined = undefined;
9.    startDate: Date | undefined = undefined;
10.    endDate: Date | undefined = undefined;
11.    trends: TrendAnalysisDto[] | undefined = undefined;
12.    facilityId: number | undefined = undefined;
13.    loading = false;
14.    loadingInitial = false;
15. 
16.    constructor() {
17.       makeAutoObservable(this);
18.    }
19. 
20.    loadDashboard = async (from?: Date, to?: Date) => {
21.       this.setLoadingInitial(true);
22.       try {
23.          const dashboardData = await agent.Analytics.dashboardMetrics(from, to);
24.          runInAction(() => {
25.             this.dashboardInfo = dashboardData;
26.             this.toDate = to;
27.             this.fromDate = from;
28.             this.loadingInitial = false;
29.          })
30.          return dashboardData;
31.       } catch (error) {
32.          console.log(error);
33.          runInAction(() => {
34.             this.loadingInitial = false;
35.          })
36.       }
37.    }
38. 
39.    loadTrendsAnalysis = async (facilityId: number) => {
40.       this.setLoadingInitial(true);
41.       try {
42.          const trends = await agent.Analytics.generateTrends(facilityId);
43.          runInAction(() => {
44.             this.trends = trends;
45.             this.facilityId = facilityId;
46.             this.loadingInitial = false;
47.          })
48.       } catch (error) {
49.          console.log(error);
50.          runInAction(() => {
51.             this.loadingInitial = false;
52.          })
53.       }
54.    }
55. 
56.    downloadReport = async (startDate?: Date, endDate?: Date) => {
57.       this.setLoadingInitial(true);
58.       try {
59.          const startDateString = startDate?.toISOString().split('T')[0];
60.          const endDateString = endDate?.toISOString().split('T')[0];
61. 
62.          const report = await agent.Analytics.downloadReport(startDateString, endDateString);
63.          runInAction(() => {
64.             this.endDate = endDate;
65.             this.startDate = startDate;
66.             this.loadingInitial = false;
67.          })
68.          return report;
69.       } catch (error) {
70.          console.log(error);
71.          runInAction(() => {
72.             this.loadingInitial = false;
73.          })
74.       }
75.    }
76. 
77.    setLoadingInitial = (state: boolean) => {
78.       this.loadingInitial = state;
79.    }
80. }

В.5 UI сервіс для закладів. HTTP Виклики.

GitHub репозиторій:
https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab3/pzpi-22-1-khanina-daryna-lab3/my-react-app/src/app/stores/eateryStore.ts

1. ﻿import {makeAutoObservable, runInAction} from "mobx";
2. import {Eatery} from "../models/eatery.ts";
3. import agent from "../api/agent.ts";
4. 
5. export default class EateryStore {
6.    eateryRegistry = new Map<string, Eatery>();
7.    eateries: Eatery[] = [];
8.    selectedEatery: Eatery | undefined = undefined;
9.    editMode = false;
10.    loading = false;
11.    loadingInitial = false;
12. 
13.    constructor() {
14.       makeAutoObservable(this);
15.    }
16. 
17.    loadEateries = async () => {
18.       this.setLoadingInitial(true);
19.       try {
20.          const eateries = await agent.Eateries.list();
21.          runInAction(() => {
22.             this.eateries = eateries;
23.             eateries.forEach(eatery => {
24.                this.setEatery(eatery);
25.             });
26.             this.setLoadingInitial(false);
27.          })
28.       } catch (error) {
29.          console.log(error);
30.          this.setLoadingInitial(false);
31.       }
32.    }
33. 
34.    loadEatery = async (eateryId: number) => {
35.       this.setLoadingInitial(true);
36. 
37.       let eatery = this.getEateryById(eateryId);
38.       if (eatery) {
39.          runInAction(() => {
40.             this.selectedEatery = eatery;
41.             this.loadingInitial = false;
42.          })
43.          return eatery;
44.       } else {
45.          try {
46.             eatery = await agent.Eateries.details(eateryId);
47.             if (eatery) this.setEatery(eatery);
48.             runInAction(() => {
49.                this.selectedEatery = eatery;
50.                this.loadingInitial = false;
51.             })
52.             return eatery;
53.          } catch (error) {
54.             console.log(error);
55.             runInAction(() => {
56.                this.loadingInitial = false;
57.             })
58.          }
59.       }
60.    }
61. 
62.    createEatery = async (eatery: Eatery) => {
63.       this.loading = true;
64.       try {
65.          const id = await agent.Eateries.create(eatery);
66.          eatery.id = id;
67. 
68.          runInAction(() => {
69.             this.eateryRegistry.set(eatery.id.toString(), eatery);
70.             this.selectedEatery = eatery;
71.             this.editMode = false;
72.             this.loading = false;
73.          })
74.       } catch (error) {
75.          console.log(error);
76.          runInAction(() => {
77.             this.loading = false;
78.          })
79.       }
80.    }
81. 
82.    updateEatery = async (eatery: Eatery) => {
83.       this.loading = true;
84.       try {
85.          await agent.Eateries.update(eatery);
86. 
87.          runInAction(() => {
88.             this.eateryRegistry.set(eatery.id.toString(), eatery);
89.             this.selectedEatery = eatery;
90.             this.editMode = false;
91.             this.loading = false;
92.          })
93.       } catch (error) {
94.          console.log(error);
95.          runInAction(() => {
96.             this.loading = false;
97.          })
98.       }
99.    }
100. 
101.    deleteEatery = async (id: number) => {
102.       this.loading = true;
103.       try {
104.          await agent.Eateries.delete(id);
105. 
106.          runInAction(() => {
107.             this.eateryRegistry.delete(id.toString());
108.             this.loading = false;
109.          })
110.       } catch (error) {
111.          console.log(error);
112.          runInAction(() => {
113.             this.loading = false;
114.          })
115.       }
116.    }
117. 
118.    setLoadingInitial = (state: boolean) => {
119.       this.loadingInitial = state;
120.    }
121. 
122.    private setEatery = (eatery: Eatery) => {
123.       this.eateryRegistry.set(eatery.id.toString(), eatery);
124.    }
125. 
126.    private getEateryById = (id: number) => {
127.       return this.eateryRegistry.get(id.toString());
128.    }
129. }





В.6 UI сервіс для пермісій. HTTP Виклики.

GitHub репозиторій: https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab3/pzpi-22-1-khanina-daryna-lab3/my-react-app/src/app/stores/permissionStore.ts

1. ﻿import {UserRole} from "../models/user.ts";
2. 
3. export enum PermissionAccess {
4.    Read = "Read",
5.    Full = "Full",
6. }
7. 
8. export enum ManagementName {
9.    AnalyticsManagement = "AnalyticsManagement",
10.    EateriesManagement = "EateriesManagement",
11.    MetricsManagement = "MetricsManagement",
12.    BackupsManagement = "BackupsManagement",
13.    DevicesManagement = "DevicesManagement",
14.    EmployeesManagement = "EmployeesManagement",
15.    UsersManagement = "UsersManagement",
16. }
17. 
18. const rolePermissionsMap: Record<UserRole, { access: PermissionAccess, management: ManagementName }[]> = {
19.    [UserRole.Admin]: [
20.       { access: PermissionAccess.Full, management: ManagementName.AnalyticsManagement },
21.       { access: PermissionAccess.Full, management: ManagementName.EateriesManagement },
22.       { access: PermissionAccess.Full, management: ManagementName.MetricsManagement },
23.       { access: PermissionAccess.Full, management: ManagementName.BackupsManagement },
24.       { access: PermissionAccess.Full, management: ManagementName.DevicesManagement },
25.       { access: PermissionAccess.Full, management: ManagementName.EmployeesManagement },
26.       { access: PermissionAccess.Full, management: ManagementName.UsersManagement },
27.    ],
28.    [UserRole.FacilityManager]: [
29.       { access: PermissionAccess.Full, management: ManagementName.EateriesManagement },
30.       { access: PermissionAccess.Full, management: ManagementName.MetricsManagement },
31.       { access: PermissionAccess.Full, management: ManagementName.DevicesManagement },
32.       { access: PermissionAccess.Full, management: ManagementName.EmployeesManagement },
33.    ],
34.    [UserRole.Analyst]: [
35.       { access: PermissionAccess.Read, management: ManagementName.AnalyticsManagement },
36.    ],
37.    [UserRole.Staff]: [
38.       { access: PermissionAccess.Read, management: ManagementName.EmployeesManagement },
39.       { access: PermissionAccess.Read, management: ManagementName.MetricsManagement },
40.    ],
41.    [UserRole.Viewer]: [
42.       { access: PermissionAccess.Read, management: ManagementName.AnalyticsManagement },
43.       { access: PermissionAccess.Read, management: ManagementName.EateriesManagement },
44.       { access: PermissionAccess.Read, management: ManagementName.MetricsManagement },
45.       { access: PermissionAccess.Read, management: ManagementName.DevicesManagement },
46.    ]
47. };
48. 
49. export function hasAccess(
50.    role: UserRole,
51.    management: ManagementName,
52.    accessLevel: PermissionAccess
53. ): boolean {
54.    const numericRole = UserRole[role as unknown as keyof typeof UserRole];
55.    const permissions = rolePermissionsMap[numericRole] || [];
56. 
57.    return permissions.some(p =>
58.       p.management === management &&
59.       (p.access === PermissionAccess.Full || p.access === accessLevel)
60.    );
61. }






В.7 UI сервіс для користувачів. HTTP Виклики.

GitHub репозиторій: https://github.com/NureKhaninaDaryna/apz-pzpi-22-1-khanina-daryna/blob/main/Lab3/pzpi-22-1-khanina-daryna-lab3/my-react-app/src/app/stores/userStore.ts

1. ﻿import {User, UserFromValues, UserRole, UserWithId} from "../models/user.ts";
2. import {makeAutoObservable, runInAction} from "mobx";
3. import agent from "../api/agent.ts";
4. import {store} from "./store.ts";
5. import {router} from "../router/Routes.tsx";
6. 
7. export default class UserStore {
8.    user: User | null = null;
9.    users: UserWithId[] = [];
10.    loading: boolean = false;
11. 
12.    constructor() {
13.       makeAutoObservable(this);
14.    }
15. 
16.    get isLoggedIn(): boolean {
17.       return !!this.user;
18.    }
19. 
20.    loadUsers = async () => {
21.       if (this.users.length === 0) {
22.          this.loading = true;
23.          const users = await agent.Account.getAll();
24.          runInAction(() => {
25.             this.users = users;
26.             this.loading = false;
27.          });
28.       }
29.    };
30. 
31.    login = async (creds: UserFromValues): Promise<void> => {
32.       try {
33.          const user = await agent.Account.login(creds);
34.          store.commonStore.setToken(user.token);
35.          runInAction(() => this.user = user);
36.          await router.navigate('/eateries');
37.          store.modalStore.closeModal()
38.       } catch (error) {
39.          console.log(error);
40.          throw error;
41.       }
42.    }
43. 
44.    register = async (creds: UserFromValues): Promise<void> => {
45.       try {
46.          const user = await agent.Account.register(creds);
47.          store.commonStore.setToken(user.token);
48.          runInAction(() => this.user = user);
49.          store.modalStore.closeModal();
50.       } catch (error) {
51.          console.log(error);
52.          throw error;
53.       }
54.    }
55. 
56.    logout = () => {
57.       store.commonStore.setToken(null);
58.       runInAction(() => this.user = null);
59.       router.navigate('/');
60.    }
61. 
62.    changePassword = async (current: string, newPass: string) => {
63.       try {
64.          await agent.Account.changePassword({ currentPassword: current, newPassword: newPass });
65.       } catch (error) {
66.          console.log(error);
67.          throw error;
68.       }
69.    };
70. 
71.    updateUserRole = async (id: number, role: UserRole) => {
72.       try {
73.          await agent.Account.updateRole({ userId: id, role });
74.          runInAction(() => {
75.             const userIndex = this.users.findIndex(u => u.id === id);
76.             if (userIndex !== -1) {
77.                this.users[userIndex] = { ...this.users[userIndex], role };
78.             }
79.          });
80.       } catch (error) {
81.          console.log(error);
82.          throw error;
83.       }
84.    };
85. 
86.    getUser = async () => {
87.       try {
88.          const user = await agent.Account.current();
89.          runInAction(() => this.user = user);
90.       } catch (error) {
91.          console.log(error);
92.       }
93.    }
94. }





